// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package generated

import (
	"context"

	"github.com/lib/pq"
)

const createPost = `-- name: CreatePost :one
insert into
  posts(
		owner_id,
		description
	)
values
	(
		$1,
		$2
	)
returning
  id
`

type CreatePostParams struct {
	OwnerID     int32
	Description string
}

func (q *Queries) CreatePost(ctx context.Context, arg *CreatePostParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createPost, arg.OwnerID, arg.Description)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getPosts = `-- name: GetPosts :many
select
  id,
  owner_id,
  description,
  created_at
from
  posts
where
  id = any ($1::int[])
order by
  created_at desc
`

func (q *Queries) GetPosts(ctx context.Context, dollar_1 []int32) ([]*Post, error) {
	rows, err := q.db.QueryContext(ctx, getPosts, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsOfUser = `-- name: GetPostsOfUser :many
select
  id,
  owner_id,
  description,
  created_at
from
  posts
where
  owner_id = $1
limit $2
offset $3
`

type GetPostsOfUserParams struct {
	OwnerID int32
	Limit   int32
	Offset  int32
}

func (q *Queries) GetPostsOfUser(ctx context.Context, arg *GetPostsOfUserParams) ([]*Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostsOfUser, arg.OwnerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
