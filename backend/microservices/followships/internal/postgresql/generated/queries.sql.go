// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package generated

import (
	"context"
)

const createFollowship = `-- name: CreateFollowship :exec
insert
into
  followships (
    follower_id,
    followee_id
  )
values
  (
    $1,
    $2
  )
`

type CreateFollowshipParams struct {
	FollowerID int32
	FolloweeID int32
}

func (q *Queries) CreateFollowship(ctx context.Context, arg *CreateFollowshipParams) error {
	_, err := q.db.ExecContext(ctx, createFollowship, arg.FollowerID, arg.FolloweeID)
	return err
}

const deleteFollowship = `-- name: DeleteFollowship :exec
delete
from
  followships
where
  follower_id = $1 and
  followee_id = $2
`

type DeleteFollowshipParams struct {
	FollowerID int32
	FolloweeID int32
}

func (q *Queries) DeleteFollowship(ctx context.Context, arg *DeleteFollowshipParams) error {
	_, err := q.db.ExecContext(ctx, deleteFollowship, arg.FollowerID, arg.FolloweeID)
	return err
}

const getFollowees = `-- name: GetFollowees :many
select
  followee_id
from
  followships
where
  follower_id = $1
limit $2
offset $3
`

type GetFolloweesParams struct {
	FollowerID int32
	Limit      int32
	Offset     int32
}

func (q *Queries) GetFollowees(ctx context.Context, arg *GetFolloweesParams) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, getFollowees, arg.FollowerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var followee_id int32
		if err := rows.Scan(&followee_id); err != nil {
			return nil, err
		}
		items = append(items, followee_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowerAndFolloweeCounts = `-- name: GetFollowerAndFolloweeCounts :one
select
	(select count(*) from followships where followships.followee_id = $1) as follower_count,
	(select count(*) from followships where followships.follower_id = $1) as followee_count
`

type GetFollowerAndFolloweeCountsRow struct {
	FollowerCount int64
	FolloweeCount int64
}

func (q *Queries) GetFollowerAndFolloweeCounts(ctx context.Context, followeeID int32) (*GetFollowerAndFolloweeCountsRow, error) {
	row := q.db.QueryRowContext(ctx, getFollowerAndFolloweeCounts, followeeID)
	var i GetFollowerAndFolloweeCountsRow
	err := row.Scan(&i.FollowerCount, &i.FolloweeCount)
	return &i, err
}

const getFollowers = `-- name: GetFollowers :many
select
  follower_id
from
  followships
where
  followee_id = $1
limit $2
offset $3
`

type GetFollowersParams struct {
	FolloweeID int32
	Limit      int32
	Offset     int32
}

func (q *Queries) GetFollowers(ctx context.Context, arg *GetFollowersParams) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, getFollowers, arg.FolloweeID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var follower_id int32
		if err := rows.Scan(&follower_id); err != nil {
			return nil, err
		}
		items = append(items, follower_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowship = `-- name: GetFollowship :exec
select 1
from
  followships
where
  follower_id = $1 and
  followee_id = $2
limit 1
`

type GetFollowshipParams struct {
	FollowerID int32
	FolloweeID int32
}

func (q *Queries) GetFollowship(ctx context.Context, arg *GetFollowshipParams) error {
	_, err := q.db.ExecContext(ctx, getFollowship, arg.FollowerID, arg.FolloweeID)
	return err
}
