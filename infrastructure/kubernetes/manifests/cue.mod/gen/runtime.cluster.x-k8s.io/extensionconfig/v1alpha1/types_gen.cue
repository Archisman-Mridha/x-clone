// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni mod vendor crd -f /tmp/kue/cluster-api/config/crd/bases/runtime.cluster.x-k8s.io_extensionconfigs.yaml

package v1alpha1

import "strings"

// ExtensionConfig is the Schema for the ExtensionConfig API.
#ExtensionConfig: {
	// APIVersion defines the versioned schema of this representation
	// of an object.
	// Servers should convert recognized schemas to the latest
	// internal value, and
	// may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	apiVersion: "runtime.cluster.x-k8s.io/v1alpha1"

	// Kind is a string value representing the REST resource this
	// object represents.
	// Servers may infer this from the endpoint the client submits
	// requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	kind: "ExtensionConfig"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace?: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}

	// spec is the desired state of the ExtensionConfig.
	spec!: #ExtensionConfigSpec
}

// spec is the desired state of the ExtensionConfig.
#ExtensionConfigSpec: {
	// clientConfig defines how to communicate with the Extension
	// server.
	clientConfig!: {
		// caBundle is a PEM encoded CA bundle which will be used to
		// validate the Extension server's server certificate.
		caBundle?: strings.MaxRunes(51200) & strings.MinRunes(1)

		// service is a reference to the Kubernetes service for the
		// Extension server.
		// Note: Exactly one of `url` or `service` must be specified.
		//
		// If the Extension server is running within a cluster, then you
		// should use `service`.
		service?: {
			// name is the name of the service.
			name!: strings.MaxRunes(63) & strings.MinRunes(1)

			// namespace is the namespace of the service.
			namespace!: strings.MaxRunes(63) & strings.MinRunes(1)

			// path is an optional URL path and if present may be any string
			// permissible in
			// a URL. If a path is set it will be used as prefix to the
			// hook-specific path.
			path?: strings.MaxRunes(512) & strings.MinRunes(1)

			// port is the port on the service that's hosting the Extension
			// server.
			// Defaults to 443.
			// Port should be a valid port number (1-65535, inclusive).
			port?: int32
		}

		// url gives the location of the Extension server, in standard URL
		// form
		// (`scheme://host:port/path`).
		// Note: Exactly one of `url` or `service` must be specified.
		//
		// The scheme must be "https".
		//
		// The `host` should not refer to a service running in the
		// cluster; use
		// the `service` field instead.
		//
		// A path is optional, and if present may be any string
		// permissible in
		// a URL. If a path is set it will be used as prefix to the
		// hook-specific path.
		//
		// Attempting to use a user or basic auth e.g. "user:password@" is
		// not
		// allowed. Fragments ("#...") and query parameters ("?...") are
		// not
		// allowed either.
		url?: strings.MaxRunes(512) & strings.MinRunes(1)
	}

	// namespaceSelector decides whether to call the hook for an
	// object based
	// on whether the namespace for that object matches the selector.
	// Defaults to the empty LabelSelector, which matches all objects.
	namespaceSelector?: {
		// matchExpressions is a list of label selector requirements. The
		// requirements are ANDed.
		matchExpressions?: [...{
			// key is the label key that the selector applies to.
			key!: string

			// operator represents a key's relationship to a set of values.
			// Valid operators are In, NotIn, Exists and DoesNotExist.
			operator!: string

			// values is an array of string values. If the operator is In or
			// NotIn,
			// the values array must be non-empty. If the operator is Exists
			// or DoesNotExist,
			// the values array must be empty. This array is replaced during a
			// strategic
			// merge patch.
			values?: [...string]
		}]

		// matchLabels is a map of {key,value} pairs. A single {key,value}
		// in the matchLabels
		// map is equivalent to an element of matchExpressions, whose key
		// field is "key", the
		// operator is "In", and the values array contains only "value".
		// The requirements are ANDed.
		matchLabels?: {
			[string]: string
		}
	}

	// settings defines key value pairs to be passed to all calls
	// to all supported RuntimeExtensions.
	// Note: Settings can be overridden on the ClusterClass.
	settings?: {
		[string]: string
	}
}
