// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni mod vendor crd -f /tmp/kue/cluster-api/config/crd/bases/cluster.x-k8s.io_clusterclasses.yaml

package v1alpha4

import "strings"

// ClusterClass is a template which can be used to create managed
// topologies.
//
// Deprecated: This type will be removed in one of the next
// releases.
#ClusterClass: {
	// APIVersion defines the versioned schema of this representation
	// of an object.
	// Servers should convert recognized schemas to the latest
	// internal value, and
	// may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	apiVersion: "cluster.x-k8s.io/v1alpha4"

	// Kind is a string value representing the REST resource this
	// object represents.
	// Servers may infer this from the endpoint the client submits
	// requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	kind: "ClusterClass"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}

	// spec is the desired state of ClusterClass.
	spec!: #ClusterClassSpec
}

// spec is the desired state of ClusterClass.
#ClusterClassSpec: {
	// controlPlane is a reference to a local struct that holds the
	// details
	// for provisioning the Control Plane for the Cluster.
	controlPlane?: {
		machineInfrastructure?: {
			// ref is a required reference to a custom resource
			// offered by a provider.
			ref!: {
				// API version of the referent.
				apiVersion?: string

				// If referring to a piece of an object instead of an entire
				// object, this string
				// should contain a valid JSON/Go field access statement, such as
				// desiredState.manifest.containers[2].
				// For example, if the object reference is to a container within a
				// pod, this would take on a value like:
				// "spec.containers{name}" (where "name" refers to the name of the
				// container that triggered
				// the event) or if no container name is specified
				// "spec.containers[2]" (container with
				// index 2 in this pod). This syntax is chosen only to have some
				// well-defined way of
				// referencing a part of an object.
				fieldPath?: string

				// Kind of the referent.
				// More info:
				// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
				kind?: string

				// Name of the referent.
				// More info:
				// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
				name?: string

				// Namespace of the referent.
				// More info:
				// https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
				namespace?: string

				// Specific resourceVersion to which this reference is made, if
				// any.
				// More info:
				// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
				resourceVersion?: string

				// UID of the referent.
				// More info:
				// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
				uid?: string
			}
		}

		// metadata is the metadata applied to the machines of the
		// ControlPlane.
		// At runtime this metadata is merged with the corresponding
		// metadata from the topology.
		//
		// This field is supported if and only if the control plane
		// provider template
		// referenced is Machine based.
		metadata?: {
			// annotations is an unstructured key value map stored with a
			// resource that may be
			// set by external tools to store and retrieve arbitrary metadata.
			// They are not
			// queryable and should be preserved when modifying objects.
			// More info: http://kubernetes.io/docs/user-guide/annotations
			annotations?: {
				[string]: string
			}

			// labels is a map of string keys and values that can be used to
			// organize and categorize
			// (scope and select) objects. May match selectors of replication
			// controllers
			// and services.
			// More info: http://kubernetes.io/docs/user-guide/labels
			labels?: {
				[string]: string
			}
		}

		// ref is a required reference to a custom resource
		// offered by a provider.
		ref!: {
			// API version of the referent.
			apiVersion?: string

			// If referring to a piece of an object instead of an entire
			// object, this string
			// should contain a valid JSON/Go field access statement, such as
			// desiredState.manifest.containers[2].
			// For example, if the object reference is to a container within a
			// pod, this would take on a value like:
			// "spec.containers{name}" (where "name" refers to the name of the
			// container that triggered
			// the event) or if no container name is specified
			// "spec.containers[2]" (container with
			// index 2 in this pod). This syntax is chosen only to have some
			// well-defined way of
			// referencing a part of an object.
			fieldPath?: string

			// Kind of the referent.
			// More info:
			// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			kind?: string

			// Name of the referent.
			// More info:
			// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
			name?: string

			// Namespace of the referent.
			// More info:
			// https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
			namespace?: string

			// Specific resourceVersion to which this reference is made, if
			// any.
			// More info:
			// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
			resourceVersion?: string

			// UID of the referent.
			// More info:
			// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
			uid?: string
		}
	}
	infrastructure?: {
		// ref is a required reference to a custom resource
		// offered by a provider.
		ref!: {
			// API version of the referent.
			apiVersion?: string

			// If referring to a piece of an object instead of an entire
			// object, this string
			// should contain a valid JSON/Go field access statement, such as
			// desiredState.manifest.containers[2].
			// For example, if the object reference is to a container within a
			// pod, this would take on a value like:
			// "spec.containers{name}" (where "name" refers to the name of the
			// container that triggered
			// the event) or if no container name is specified
			// "spec.containers[2]" (container with
			// index 2 in this pod). This syntax is chosen only to have some
			// well-defined way of
			// referencing a part of an object.
			fieldPath?: string

			// Kind of the referent.
			// More info:
			// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			kind?: string

			// Name of the referent.
			// More info:
			// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
			name?: string

			// Namespace of the referent.
			// More info:
			// https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
			namespace?: string

			// Specific resourceVersion to which this reference is made, if
			// any.
			// More info:
			// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
			resourceVersion?: string

			// UID of the referent.
			// More info:
			// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
			uid?: string
		}
	}
	workers?: {
		// machineDeployments is a list of machine deployment classes that
		// can be used to create
		// a set of worker nodes.
		machineDeployments?: [...{
			// class denotes a type of worker node present in the cluster,
			// this name MUST be unique within a ClusterClass and can be
			// referenced
			// in the Cluster to create a managed MachineDeployment.
			class!: string

			// template is a local struct containing a collection of templates
			// for creation of
			// MachineDeployment objects representing a set of worker nodes.
			template!: {
				bootstrap!: {
					// ref is a required reference to a custom resource
					// offered by a provider.
					ref!: {
						// API version of the referent.
						apiVersion?: string

						// If referring to a piece of an object instead of an entire
						// object, this string
						// should contain a valid JSON/Go field access statement, such as
						// desiredState.manifest.containers[2].
						// For example, if the object reference is to a container within a
						// pod, this would take on a value like:
						// "spec.containers{name}" (where "name" refers to the name of the
						// container that triggered
						// the event) or if no container name is specified
						// "spec.containers[2]" (container with
						// index 2 in this pod). This syntax is chosen only to have some
						// well-defined way of
						// referencing a part of an object.
						fieldPath?: string

						// Kind of the referent.
						// More info:
						// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
						kind?: string

						// Name of the referent.
						// More info:
						// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
						name?: string

						// Namespace of the referent.
						// More info:
						// https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
						namespace?: string

						// Specific resourceVersion to which this reference is made, if
						// any.
						// More info:
						// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
						resourceVersion?: string

						// UID of the referent.
						// More info:
						// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
						uid?: string
					}
				}
				infrastructure!: {
					// ref is a required reference to a custom resource
					// offered by a provider.
					ref!: {
						// API version of the referent.
						apiVersion?: string

						// If referring to a piece of an object instead of an entire
						// object, this string
						// should contain a valid JSON/Go field access statement, such as
						// desiredState.manifest.containers[2].
						// For example, if the object reference is to a container within a
						// pod, this would take on a value like:
						// "spec.containers{name}" (where "name" refers to the name of the
						// container that triggered
						// the event) or if no container name is specified
						// "spec.containers[2]" (container with
						// index 2 in this pod). This syntax is chosen only to have some
						// well-defined way of
						// referencing a part of an object.
						fieldPath?: string

						// Kind of the referent.
						// More info:
						// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
						kind?: string

						// Name of the referent.
						// More info:
						// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
						name?: string

						// Namespace of the referent.
						// More info:
						// https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
						namespace?: string

						// Specific resourceVersion to which this reference is made, if
						// any.
						// More info:
						// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
						resourceVersion?: string

						// UID of the referent.
						// More info:
						// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
						uid?: string
					}
				}

				// metadata is the metadata applied to the machines of the
				// MachineDeployment.
				// At runtime this metadata is merged with the corresponding
				// metadata from the topology.
				metadata?: {
					// annotations is an unstructured key value map stored with a
					// resource that may be
					// set by external tools to store and retrieve arbitrary metadata.
					// They are not
					// queryable and should be preserved when modifying objects.
					// More info: http://kubernetes.io/docs/user-guide/annotations
					annotations?: {
						[string]: string
					}

					// labels is a map of string keys and values that can be used to
					// organize and categorize
					// (scope and select) objects. May match selectors of replication
					// controllers
					// and services.
					// More info: http://kubernetes.io/docs/user-guide/labels
					labels?: {
						[string]: string
					}
				}
			}
		}]
	}
}
