// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni mod vendor crd -f /tmp/kue/cluster-api/config/crd/bases/cluster.x-k8s.io_machinehealthchecks.yaml

package v1beta2

import (
	"strings"
	"struct"
	"list"
)

// MachineHealthCheck is the Schema for the machinehealthchecks
// API.
#MachineHealthCheck: {
	// APIVersion defines the versioned schema of this representation
	// of an object.
	// Servers should convert recognized schemas to the latest
	// internal value, and
	// may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	apiVersion: "cluster.x-k8s.io/v1beta2"

	// Kind is a string value representing the REST resource this
	// object represents.
	// Servers may infer this from the endpoint the client submits
	// requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	kind: "MachineHealthCheck"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}

	// spec is the specification of machine health check policy
	spec!: #MachineHealthCheckSpec
}

// spec is the specification of machine health check policy
#MachineHealthCheckSpec: {
	// checks are the checks that are used to evaluate if a Machine is
	// healthy.
	//
	// Independent of this configuration the MachineHealthCheck
	// controller will always
	// flag Machines with `cluster.x-k8s.io/remediate-machine`
	// annotation and
	// Machines with deleted Nodes as unhealthy.
	//
	// Furthermore, if checks.nodeStartupTimeoutSeconds is not set it
	// is defaulted to 10 minutes and evaluated accordingly.
	checks?: struct.MinFields(1) & {
		// nodeStartupTimeoutSeconds allows to set the maximum time for
		// MachineHealthCheck
		// to consider a Machine unhealthy if a corresponding Node isn't
		// associated
		// through a `Spec.ProviderID` field.
		//
		// The duration set in this field is compared to the greatest of:
		// - Cluster's infrastructure ready condition timestamp (if and
		// when available)
		// - Control Plane's initialized condition timestamp (if and when
		// available)
		// - Machine's infrastructure ready condition timestamp (if and
		// when available)
		// - Machine's metadata creation timestamp
		//
		// Defaults to 10 minutes.
		// If you wish to disable this feature, set the value explicitly
		// to 0.
		nodeStartupTimeoutSeconds?: int32 & >=0

		// unhealthyNodeConditions contains a list of conditions that
		// determine
		// whether a node is considered unhealthy. The conditions are
		// combined in a
		// logical OR, i.e. if any of the conditions is met, the node is
		// unhealthy.
		unhealthyNodeConditions?: list.MaxItems(100) & [...{
			// status of the condition, one of True, False, Unknown.
			status!: strings.MinRunes(1)

			// timeoutSeconds is the duration that a node must be in a given
			// status for,
			// after which the node is considered unhealthy.
			// For example, with a value of "1h", the node must match the
			// status
			// for at least 1 hour before being considered unhealthy.
			timeoutSeconds!: int32 & >=0

			// type of Node condition
			type!: strings.MinRunes(1)
		}] & [_, ...]
	}

	// clusterName is the name of the Cluster this object belongs to.
	clusterName!: strings.MaxRunes(63) & strings.MinRunes(1)

	// remediation configures if and how remediations are triggered if
	// a Machine is unhealthy.
	//
	// If remediation or remediation.triggerIf is not set,
	// remediation will always be triggered for unhealthy Machines.
	//
	// If remediation or remediation.templateRef is not set,
	// the OwnerRemediated condition will be set on unhealthy Machines
	// to trigger remediation via
	// the owner of the Machines, for example a MachineSet or a
	// KubeadmControlPlane.
	remediation?: struct.MinFields(1) & {
		// templateRef is a reference to a remediation template
		// provided by an infrastructure provider.
		//
		// This field is completely optional, when filled, the
		// MachineHealthCheck controller
		// creates a new object from the template referenced and hands off
		// remediation of the machine to
		// a controller that lives outside of Cluster API.
		templateRef?: {
			// apiVersion of the remediation template.
			// apiVersion must be fully qualified domain name followed by /
			// and a version.
			// NOTE: This field must be kept in sync with the APIVersion of
			// the remediation template.
			apiVersion!: strings.MaxRunes(317) & strings.MinRunes(1) & {
				=~"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\\/[a-z]([-a-z0-9]*[a-z0-9])?$"
			}

			// kind of the remediation template.
			// kind must consist of alphanumeric characters or '-', start with
			// an alphabetic character, and end with an alphanumeric
			// character.
			kind!: strings.MaxRunes(63) & strings.MinRunes(1) & {
				=~"^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
			}

			// name of the remediation template.
			// name must consist of lower case alphanumeric characters, '-' or
			// '.', and must start and end with an alphanumeric character.
			name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
				=~"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
			}
		}

		// triggerIf configures if remediations are triggered.
		// If this field is not set, remediations are always triggered.
		triggerIf?: struct.MinFields(1) & {
			// unhealthyInRange specifies that remediations are only triggered
			// if the number of
			// unhealthy Machines is in the configured range.
			// Takes precedence over unhealthyLessThanOrEqualTo.
			// Eg. "[3-5]" - This means that remediation will be allowed only
			// when:
			// (a) there are at least 3 unhealthy Machines (and)
			// (b) there are at most 5 unhealthy Machines
			unhealthyInRange?: strings.MaxRunes(32) & strings.MinRunes(1) & {
				=~"^\\[[0-9]+-[0-9]+\\]$"
			}

			// unhealthyLessThanOrEqualTo specifies that remediations are only
			// triggered if the number of
			// unhealthy Machines is less than or equal to the configured
			// value.
			// unhealthyInRange takes precedence if set.
			unhealthyLessThanOrEqualTo?: matchN(>=1, [int, string])
		}
	}

	// selector is a label selector to match machines whose health
	// will be exercised
	selector!: {
		// matchExpressions is a list of label selector requirements. The
		// requirements are ANDed.
		matchExpressions?: [...{
			// key is the label key that the selector applies to.
			key!: string

			// operator represents a key's relationship to a set of values.
			// Valid operators are In, NotIn, Exists and DoesNotExist.
			operator!: string

			// values is an array of string values. If the operator is In or
			// NotIn,
			// the values array must be non-empty. If the operator is Exists
			// or DoesNotExist,
			// the values array must be empty. This array is replaced during a
			// strategic
			// merge patch.
			values?: [...string]
		}]

		// matchLabels is a map of {key,value} pairs. A single {key,value}
		// in the matchLabels
		// map is equivalent to an element of matchExpressions, whose key
		// field is "key", the
		// operator is "In", and the values array contains only "value".
		// The requirements are ANDed.
		matchLabels?: {
			[string]: string
		}
	}
}
