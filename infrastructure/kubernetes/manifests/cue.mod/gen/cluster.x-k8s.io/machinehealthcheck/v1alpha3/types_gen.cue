// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni mod vendor crd -f /tmp/kue/cluster-api/config/crd/bases/cluster.x-k8s.io_machinehealthchecks.yaml

package v1alpha3

import "strings"

// MachineHealthCheck is the Schema for the machinehealthchecks
// API.
//
// Deprecated: This type will be removed in one of the next
// releases.
#MachineHealthCheck: {
	// APIVersion defines the versioned schema of this representation
	// of an object.
	// Servers should convert recognized schemas to the latest
	// internal value, and
	// may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	apiVersion: "cluster.x-k8s.io/v1alpha3"

	// Kind is a string value representing the REST resource this
	// object represents.
	// Servers may infer this from the endpoint the client submits
	// requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	kind: "MachineHealthCheck"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}

	// spec is the specification of machine health check policy
	spec!: #MachineHealthCheckSpec
}

// spec is the specification of machine health check policy
#MachineHealthCheckSpec: {
	// clusterName is the name of the Cluster this object belongs to.
	clusterName!: strings.MinRunes(1)

	// maxUnhealthy specifies the maximum number of unhealthy machines
	// allowed.
	// Any further remediation is only allowed if at most
	// "maxUnhealthy" machines selected by
	// "selector" are not healthy.
	maxUnhealthy?: matchN(>=1, [int, string])

	// nodeStartupTimeout is the duration after which machines without
	// a node will be considered to
	// have failed and will be remediated.
	nodeStartupTimeout?: string

	// remediationTemplate is a reference to a remediation template
	// provided by an infrastructure provider.
	//
	// This field is completely optional, when filled, the
	// MachineHealthCheck controller
	// creates a new object from the template referenced and hands off
	// remediation of the machine to
	// a controller that lives outside of Cluster API.
	remediationTemplate?: {
		// API version of the referent.
		apiVersion?: string

		// If referring to a piece of an object instead of an entire
		// object, this string
		// should contain a valid JSON/Go field access statement, such as
		// desiredState.manifest.containers[2].
		// For example, if the object reference is to a container within a
		// pod, this would take on a value like:
		// "spec.containers{name}" (where "name" refers to the name of the
		// container that triggered
		// the event) or if no container name is specified
		// "spec.containers[2]" (container with
		// index 2 in this pod). This syntax is chosen only to have some
		// well-defined way of
		// referencing a part of an object.
		fieldPath?: string

		// Kind of the referent.
		// More info:
		// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
		kind?: string

		// Name of the referent.
		// More info:
		// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
		name?: string

		// Namespace of the referent.
		// More info:
		// https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
		namespace?: string

		// Specific resourceVersion to which this reference is made, if
		// any.
		// More info:
		// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
		resourceVersion?: string

		// UID of the referent.
		// More info:
		// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
		uid?: string
	}

	// selector is the label selector to match machines whose health
	// will be exercised
	selector!: {
		// matchExpressions is a list of label selector requirements. The
		// requirements are ANDed.
		matchExpressions?: [...{
			// key is the label key that the selector applies to.
			key!: string

			// operator represents a key's relationship to a set of values.
			// Valid operators are In, NotIn, Exists and DoesNotExist.
			operator!: string

			// values is an array of string values. If the operator is In or
			// NotIn,
			// the values array must be non-empty. If the operator is Exists
			// or DoesNotExist,
			// the values array must be empty. This array is replaced during a
			// strategic
			// merge patch.
			values?: [...string]
		}]

		// matchLabels is a map of {key,value} pairs. A single {key,value}
		// in the matchLabels
		// map is equivalent to an element of matchExpressions, whose key
		// field is "key", the
		// operator is "In", and the values array contains only "value".
		// The requirements are ANDed.
		matchLabels?: {
			[string]: string
		}
	}

	// unhealthyConditions contains a list of the conditions that
	// determine
	// whether a node is considered unhealthy. The conditions are
	// combined in a
	// logical OR, i.e. if any of the conditions is met, the node is
	// unhealthy.
	unhealthyConditions!: [...{
		// status of the condition, one of True, False, Unknown.
		status!: strings.MinRunes(1)

		// timeout is the duration that a node must be in a given status
		// for,
		// after which the node is considered unhealthy.
		// For example, with a value of "1h", the node must match the
		// status
		// for at least 1 hour before being considered unhealthy.
		timeout!: string

		// type of Node condition
		type!: strings.MinRunes(1)
	}] & [_, ...]
}
