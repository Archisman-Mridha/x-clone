// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni mod vendor crd -f /tmp/kue/cluster-api/config/crd/bases/cluster.x-k8s.io_machines.yaml

package v1alpha4

import "strings"

// Machine is the Schema for the machines API.
//
// Deprecated: This type will be removed in one of the next
// releases.
#Machine: {
	// APIVersion defines the versioned schema of this representation
	// of an object.
	// Servers should convert recognized schemas to the latest
	// internal value, and
	// may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	apiVersion: "cluster.x-k8s.io/v1alpha4"

	// Kind is a string value representing the REST resource this
	// object represents.
	// Servers may infer this from the endpoint the client submits
	// requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	kind: "Machine"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}

	// spec is the desired state of Machine.
	spec!: #MachineSpec
}

// spec is the desired state of Machine.
#MachineSpec: {
	// bootstrap is a reference to a local struct which encapsulates
	// fields to configure the Machineâ€™s bootstrapping mechanism.
	bootstrap!: {
		// configRef is a reference to a bootstrap provider-specific
		// resource
		// that holds configuration details. The reference is optional to
		// allow users/operators to specify Bootstrap.DataSecretName
		// without
		// the need of a controller.
		configRef?: {
			// API version of the referent.
			apiVersion?: string

			// If referring to a piece of an object instead of an entire
			// object, this string
			// should contain a valid JSON/Go field access statement, such as
			// desiredState.manifest.containers[2].
			// For example, if the object reference is to a container within a
			// pod, this would take on a value like:
			// "spec.containers{name}" (where "name" refers to the name of the
			// container that triggered
			// the event) or if no container name is specified
			// "spec.containers[2]" (container with
			// index 2 in this pod). This syntax is chosen only to have some
			// well-defined way of
			// referencing a part of an object.
			fieldPath?: string

			// Kind of the referent.
			// More info:
			// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			kind?: string

			// Name of the referent.
			// More info:
			// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
			name?: string

			// Namespace of the referent.
			// More info:
			// https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
			namespace?: string

			// Specific resourceVersion to which this reference is made, if
			// any.
			// More info:
			// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
			resourceVersion?: string

			// UID of the referent.
			// More info:
			// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
			uid?: string
		}

		// dataSecretName is the name of the secret that stores the
		// bootstrap data script.
		// If nil, the Machine should remain in the Pending state.
		dataSecretName?: string
	}

	// clusterName is the name of the Cluster this object belongs to.
	clusterName!: strings.MinRunes(1)

	// failureDomain is the failure domain the machine will be created
	// in.
	// Must match a key in the FailureDomains map stored on the
	// cluster object.
	failureDomain?: string

	// infrastructureRef is a required reference to a custom resource
	// offered by an infrastructure provider.
	infrastructureRef!: {
		// API version of the referent.
		apiVersion?: string

		// If referring to a piece of an object instead of an entire
		// object, this string
		// should contain a valid JSON/Go field access statement, such as
		// desiredState.manifest.containers[2].
		// For example, if the object reference is to a container within a
		// pod, this would take on a value like:
		// "spec.containers{name}" (where "name" refers to the name of the
		// container that triggered
		// the event) or if no container name is specified
		// "spec.containers[2]" (container with
		// index 2 in this pod). This syntax is chosen only to have some
		// well-defined way of
		// referencing a part of an object.
		fieldPath?: string

		// Kind of the referent.
		// More info:
		// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
		kind?: string

		// Name of the referent.
		// More info:
		// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
		name?: string

		// Namespace of the referent.
		// More info:
		// https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
		namespace?: string

		// Specific resourceVersion to which this reference is made, if
		// any.
		// More info:
		// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
		resourceVersion?: string

		// UID of the referent.
		// More info:
		// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
		uid?: string
	}

	// nodeDrainTimeout is the total amount of time that the
	// controller will spend on draining a node.
	// The default value is 0, meaning that the node can be drained
	// without any time limitations.
	// NOTE: NodeDrainTimeout is different from `kubectl drain
	// --timeout`
	nodeDrainTimeout?: string

	// providerID is the identification ID of the machine provided by
	// the provider.
	// This field must match the provider ID as seen on the node
	// object corresponding to this machine.
	// This field is required by higher level consumers of
	// cluster-api. Example use case is cluster autoscaler
	// with cluster-api as provider. Clean-up logic in the autoscaler
	// compares machines to nodes to find out
	// machines at provider which could not get registered as
	// Kubernetes nodes. With cluster-api as a
	// generic out-of-tree provider for autoscaler, this field is
	// required by autoscaler to be
	// able to have a provider view of the list of machines. Another
	// list of nodes is queried from the k8s apiserver
	// and then a comparison is done to find out unregistered machines
	// and are marked for delete.
	// This field will be set by the actuators and consumed by higher
	// level entities like autoscaler that will
	// be interfacing with cluster-api as generic provider.
	providerID?: string

	// version defines the desired Kubernetes version.
	// This field is meant to be optionally used by bootstrap
	// providers.
	version?: string
}
