// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni mod vendor crd -f /tmp/kue/cluster-api-provider-aws/config/crd/bases/bootstrap.cluster.x-k8s.io_eksconfigs.yaml

package v1beta2

import "strings"

// EKSConfig is the schema for the Amazon EKS Machine Bootstrap
// Configuration API.
#EKSConfig: {
	// APIVersion defines the versioned schema of this representation
	// of an object.
	// Servers should convert recognized schemas to the latest
	// internal value, and
	// may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	apiVersion: "bootstrap.cluster.x-k8s.io/v1beta2"

	// Kind is a string value representing the REST resource this
	// object represents.
	// Servers may infer this from the endpoint the client submits
	// requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	kind: "EKSConfig"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}

	// EKSConfigSpec defines the desired state of Amazon EKS Bootstrap
	// Configuration.
	spec!: #EKSConfigSpec
}

// EKSConfigSpec defines the desired state of Amazon EKS Bootstrap
// Configuration.
#EKSConfigSpec: {
	// APIRetryAttempts is the number of retry attempts for AWS API
	// call.
	apiRetryAttempts?: int

	// BootstrapCommandOverride allows you to override the bootstrap
	// command to use for EKS nodes.
	boostrapCommandOverride?: string

	// ContainerRuntime specify the container runtime to use when
	// bootstrapping EKS.
	containerRuntime?: string

	// DiskSetup specifies options for the creation of partition
	// tables and file systems on devices.
	diskSetup?: {
		// Filesystems specifies the list of file systems to setup.
		filesystems?: [...{
			// Device specifies the device name
			device!: string

			// ExtraOpts defined extra options to add to the command for
			// creating the file system.
			extraOpts?: [...string]

			// Filesystem specifies the file system type.
			filesystem!: string

			// Label specifies the file system label to be used. If set to
			// None, no label is used.
			label!: string

			// Overwrite defines whether or not to overwrite any existing
			// filesystem.
			// If true, any pre-existing file system will be destroyed. Use
			// with Caution.
			overwrite?: bool

			// Partition specifies the partition to use. The valid options
			// are: "auto|any", "auto", "any", "none", and <NUM>, where NUM
			// is the actual partition number.
			partition?: string
		}]

		// Partitions specifies the list of the partitions to setup.
		partitions?: [...{
			// Device is the name of the device.
			device!: string

			// Layout specifies the device layout.
			// If it is true, a single partition will be created for the
			// entire device.
			// When layout is false, it means don't partition or ignore
			// existing partitioning.
			layout!: bool

			// Overwrite describes whether to skip checks and create the
			// partition if a partition or filesystem is found on the device.
			// Use with caution. Default is 'false'.
			overwrite?: bool

			// TableType specifies the tupe of partition table. The following
			// are supported:
			// 'mbr': default and setups a MS-DOS partition table
			// 'gpt': setups a GPT partition table
			tableType?: string
		}]
	}

	// DNSClusterIP overrides the IP address to use for DNS queries
	// within the cluster.
	dnsClusterIP?: string

	// DockerConfigJson is used for the contents of the
	// /etc/docker/daemon.json file. Useful if you want a custom
	// config differing from the default one in the AMI.
	// This is expected to be a json string.
	dockerConfigJson?: string

	// Files specifies extra files to be passed to user_data upon
	// creation.
	files?: [...{
		// Append specifies whether to append Content to existing file if
		// Path exists.
		append?: bool

		// Content is the actual content of the file.
		content?: string
		contentFrom?: {
			// Secret represents a secret that should populate this file.
			secret!: {
				// Key is the key in the secret's data map for this value.
				key!: string

				// Name of the secret in the KubeadmBootstrapConfig's namespace to
				// use.
				name!: string
			}
		}

		// Encoding specifies the encoding of the file contents.
		encoding?: "base64" | "gzip" | "gzip+base64"

		// Owner specifies the ownership of the file, e.g. "root:root".
		owner?: string

		// Path specifies the full path on disk where to store the file.
		path!: string

		// Permissions specifies the permissions to assign to the file,
		// e.g. "0640".
		permissions?: string
	}]

	// KubeletExtraArgs passes the specified kubelet args into the
	// Amazon EKS machine bootstrap script
	kubeletExtraArgs?: {
		[string]: string
	}

	// Mounts specifies a list of mount points to be setup.
	mounts?: [...[...string]]

	// NTP specifies NTP configuration
	ntp?: {
		// Enabled specifies whether NTP should be enabled
		enabled?: bool

		// Servers specifies which NTP servers to use
		servers?: [...string]
	}

	// PauseContainer allows customization of the pause container to
	// use.
	pauseContainer?: {
		// AccountNumber is the AWS account number to pull the pause
		// container from.
		accountNumber!: string

		// Version is the tag of the pause container to use.
		version!: string
	}

	// PostBootstrapCommands specifies extra commands to run after
	// bootstrapping nodes to the cluster
	postBootstrapCommands?: [...string]

	// PreBootstrapCommands specifies extra commands to run before
	// bootstrapping nodes to the cluster
	preBootstrapCommands?: [...string]

	// ServiceIPV6Cidr is the ipv6 cidr range of the cluster. If this
	// is specified then
	// the ip family will be set to ipv6.
	serviceIPV6Cidr?: string

	// UseMaxPods sets --max-pods for the kubelet when true.
	useMaxPods?: bool

	// Users specifies extra users to add
	users?: [...{
		// Gecos specifies the gecos to use for the user
		gecos?: string

		// Groups specifies the additional groups for the user
		groups?: string

		// HomeDir specifies the home directory to use for the user
		homeDir?: string

		// Inactive specifies whether to mark the user as inactive
		inactive?: bool

		// LockPassword specifies if password login should be disabled
		lockPassword?: bool

		// Name specifies the username
		name!: string

		// Passwd specifies a hashed password for the user
		passwd?: string
		passwdFrom?: {
			// Secret represents a secret that should populate this password.
			secret!: {
				// Key is the key in the secret's data map for this value.
				key!: string

				// Name of the secret in the KubeadmBootstrapConfig's namespace to
				// use.
				name!: string
			}
		}

		// PrimaryGroup specifies the primary group for the user
		primaryGroup?: string

		// Shell specifies the user's shell
		shell?: string

		// SSHAuthorizedKeys specifies a list of ssh authorized keys for
		// the user
		sshAuthorizedKeys?: [...string]

		// Sudo specifies a sudo role for the user
		sudo?: string
	}]
}
