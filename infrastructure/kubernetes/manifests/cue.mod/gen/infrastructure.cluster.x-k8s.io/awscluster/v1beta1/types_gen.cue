// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni mod vendor crd -f /tmp/kue/cluster-api-provider-aws/config/crd/bases/infrastructure.cluster.x-k8s.io_awsclusters.yaml

package v1beta1

import "strings"

// AWSCluster is the schema for Amazon EC2 based Kubernetes
// Cluster API.
#AWSCluster: {
	// APIVersion defines the versioned schema of this representation
	// of an object.
	// Servers should convert recognized schemas to the latest
	// internal value, and
	// may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	apiVersion: "infrastructure.cluster.x-k8s.io/v1beta1"

	// Kind is a string value representing the REST resource this
	// object represents.
	// Servers may infer this from the endpoint the client submits
	// requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	kind: "AWSCluster"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}

	// AWSClusterSpec defines the desired state of an EC2-based
	// Kubernetes cluster.
	spec!: #AWSClusterSpec
}

// AWSClusterSpec defines the desired state of an EC2-based
// Kubernetes cluster.
#AWSClusterSpec: {
	// AdditionalTags is an optional set of tags to add to AWS
	// resources managed by the AWS provider, in addition to the
	// ones added by default.
	additionalTags?: {
		[string]: string
	}

	// Bastion contains options to configure the bastion host.
	bastion?: {
		// AllowedCIDRBlocks is a list of CIDR blocks allowed to access
		// the bastion host.
		// They are set as ingress rules for the Bastion host's Security
		// Group (defaults to 0.0.0.0/0).
		allowedCIDRBlocks?: [...string]

		// AMI will use the specified AMI to boot the bastion. If not
		// specified,
		// the AMI will default to one picked out in public space.
		ami?: string

		// DisableIngressRules will ensure there are no Ingress rules in
		// the bastion host's security group.
		// Requires AllowedCIDRBlocks to be empty.
		disableIngressRules?: bool

		// Enabled allows this provider to create a bastion host instance
		// with a public ip to access the VPC private network.
		enabled?: bool

		// InstanceType will use the specified instance type for the
		// bastion. If not specified,
		// Cluster API Provider AWS will use t3.micro for all regions
		// except us-east-1, where t2.micro
		// will be the default.
		instanceType?: string
	}

	// ControlPlaneEndpoint represents the endpoint used to
	// communicate with the control plane.
	controlPlaneEndpoint?: {
		// host is the hostname on which the API server is serving.
		host!: strings.MaxRunes(512)

		// port is the port on which the API server is serving.
		port!: int32
	}

	// ControlPlaneLoadBalancer is optional configuration for
	// customizing control plane behavior.
	controlPlaneLoadBalancer?: {
		// AdditionalSecurityGroups sets the security groups used by the
		// load balancer. Expected to be security group IDs
		// This is optional - if not provided new security groups will be
		// created for the load balancer
		additionalSecurityGroups?: [...string]

		// CrossZoneLoadBalancing enables the classic ELB cross
		// availability zone balancing.
		//
		// With cross-zone load balancing, each load balancer node for
		// your Classic Load Balancer
		// distributes requests evenly across the registered instances in
		// all enabled Availability Zones.
		// If cross-zone load balancing is disabled, each load balancer
		// node distributes requests evenly across
		// the registered instances in its Availability Zone only.
		//
		// Defaults to false.
		crossZoneLoadBalancing?: bool

		// HealthCheckProtocol sets the protocol type for classic ELB
		// health check target
		// default value is ClassicELBProtocolSSL
		healthCheckProtocol?: string

		// Name sets the name of the classic ELB load balancer. As per
		// AWS, the name must be unique
		// within your set of load balancers for the region, must have a
		// maximum of 32 characters, must
		// contain only alphanumeric characters or hyphens, and cannot
		// begin or end with a hyphen. Once
		// set, the value cannot be changed.
		name?: strings.MaxRunes(32) & {
			=~"^[A-Za-z0-9]([A-Za-z0-9]{0,31}|[-A-Za-z0-9]{0,30}[A-Za-z0-9])$"
		}

		// Scheme sets the scheme of the load balancer (defaults to
		// internet-facing)
		scheme?: "internet-facing" | "internal"

		// Subnets sets the subnets that should be applied to the control
		// plane load balancer (defaults to discovered subnets for
		// managed VPCs or an empty set for unmanaged VPCs)
		subnets?: [...string]
	}

	// IdentityRef is a reference to an identity to be used when
	// reconciling the managed control plane.
	// If no identity is specified, the default identity for this
	// controller will be used.
	identityRef?: {
		// Kind of the identity.
		kind!: "AWSClusterControllerIdentity" | "AWSClusterRoleIdentity" | "AWSClusterStaticIdentity"

		// Name of the identity.
		name!: strings.MinRunes(1)
	}

	// ImageLookupBaseOS is the name of the base operating system used
	// to look
	// up machine images when a machine does not specify an AMI. When
	// set, this
	// will be used for all cluster machines unless a machine
	// specifies a
	// different ImageLookupBaseOS.
	imageLookupBaseOS?: string

	// ImageLookupFormat is the AMI naming format to look up machine
	// images when
	// a machine does not specify an AMI. When set, this will be used
	// for all
	// cluster machines unless a machine specifies a different
	// ImageLookupOrg.
	// Supports substitutions for {{.BaseOS}} and {{.K8sVersion}} with
	// the base
	// OS and kubernetes version, respectively. The BaseOS will be the
	// value in
	// ImageLookupBaseOS or ubuntu (the default), and the kubernetes
	// version as
	// defined by the packages produced by kubernetes/release without
	// v as a
	// prefix: 1.13.0, 1.12.5-mybuild.1, or 1.17.3. For example, the
	// default
	// image format of capa-ami-{{.BaseOS}}-?{{.K8sVersion}}-* will
	// end up
	// searching for AMIs that match the pattern
	// capa-ami-ubuntu-?1.18.0-* for a
	// Machine that is targeting kubernetes v1.18.0 and the ubuntu
	// base OS. See
	// also: https://golang.org/pkg/text/template/
	imageLookupFormat?: string

	// ImageLookupOrg is the AWS Organization ID to look up machine
	// images when a
	// machine does not specify an AMI. When set, this will be used
	// for all
	// cluster machines unless a machine specifies a different
	// ImageLookupOrg.
	imageLookupOrg?: string

	// NetworkSpec encapsulates all things related to AWS network.
	network?: {
		cni?: {
			// CNIIngressRules specify rules to apply to control plane and
			// worker node security groups.
			// The source for the rule will be set to control plane and worker
			// security group IDs.
			cniIngressRules?: [...{
				description!: string
				fromPort!:    int64

				// SecurityGroupProtocol defines the protocol type for a security
				// group rule.
				protocol!: string
				toPort!:   int64
			}]
		}

		// SecurityGroupOverrides is an optional set of security groups to
		// use for cluster instances
		// This is optional - if not provided new security groups will be
		// created for the cluster
		securityGroupOverrides?: {
			[string]: string
		}

		// Subnets configuration.
		subnets?: [...{
			// AvailabilityZone defines the availability zone to use for this
			// subnet in the cluster's region.
			availabilityZone?: string

			// CidrBlock is the CIDR block to be used when the provider
			// creates a managed VPC.
			cidrBlock?: string

			// ID defines a unique identifier to reference this resource.
			id?: string

			// IPv6CidrBlock is the IPv6 CIDR block to be used when the
			// provider creates a managed VPC.
			// A subnet can have an IPv4 and an IPv6 address.
			// IPv6 is only supported in managed clusters, this field cannot
			// be set on AWSCluster object.
			ipv6CidrBlock?: string

			// IsIPv6 defines the subnet as an IPv6 subnet. A subnet is IPv6
			// when it is associated with a VPC that has IPv6 enabled.
			// IPv6 is only supported in managed clusters, this field cannot
			// be set on AWSCluster object.
			isIpv6?: bool

			// IsPublic defines the subnet as a public subnet. A subnet is
			// public when it is associated with a route table that has a
			// route to an internet gateway.
			isPublic?: bool

			// NatGatewayID is the NAT gateway id associated with the subnet.
			// Ignored unless the subnet is managed by the provider, in which
			// case this is set on the public subnet where the NAT gateway
			// resides. It is then used to determine routes for private
			// subnets in the same AZ as the public subnet.
			natGatewayId?: string

			// RouteTableID is the routing table id associated with the
			// subnet.
			routeTableId?: string

			// Tags is a collection of tags describing the resource.
			tags?: {
				[string]: string
			}
		}]

		// VPC configuration.
		vpc?: {
			// AvailabilityZoneSelection specifies how AZs should be selected
			// if there are more AZs
			// in a region than specified by AvailabilityZoneUsageLimit. There
			// are 2 selection schemes:
			// Ordered - selects based on alphabetical order
			// Random - selects AZs randomly in a region
			// Defaults to Ordered
			availabilityZoneSelection?: "Ordered" | "Random"

			// AvailabilityZoneUsageLimit specifies the maximum number of
			// availability zones (AZ) that
			// should be used in a region when automatically creating subnets.
			// If a region has more
			// than this number of AZs then this number of AZs will be picked
			// randomly when creating
			// default subnets. Defaults to 3
			availabilityZoneUsageLimit?: int & >=1

			// CidrBlock is the CIDR block to be used when the provider
			// creates a managed VPC.
			// Defaults to 10.0.0.0/16.
			cidrBlock?: string

			// ID is the vpc-id of the VPC this provider should use to create
			// resources.
			id?: string

			// InternetGatewayID is the id of the internet gateway associated
			// with the VPC.
			internetGatewayId?: string

			// IPv6 contains ipv6 specific settings for the network. Supported
			// only in managed clusters.
			// This field cannot be set on AWSCluster object.
			ipv6?: {
				// CidrBlock is the CIDR block provided by Amazon when VPC has
				// enabled IPv6.
				cidrBlock?: string

				// EgressOnlyInternetGatewayID is the id of the egress only
				// internet gateway associated with an IPv6 enabled VPC.
				egressOnlyInternetGatewayId?: string

				// PoolID is the IP pool which must be defined in case of BYO IP
				// is defined.
				poolId?: string
			}

			// Tags is a collection of tags describing the resource.
			tags?: {
				[string]: string
			}
		}
	}

	// The AWS Region the cluster lives in.
	region?: string

	// S3Bucket contains options to configure a supporting S3 bucket
	// for this
	// cluster - currently used for nodes requiring Ignition
	// (https://coreos.github.io/ignition/) for bootstrapping
	// (requires
	// BootstrapFormatIgnition feature flag to be enabled).
	s3Bucket?: {
		// ControlPlaneIAMInstanceProfile is a name of the
		// IAMInstanceProfile, which will be allowed
		// to read control-plane node bootstrap data from S3 Bucket.
		controlPlaneIAMInstanceProfile!: string

		// Name defines name of S3 Bucket to be created.
		name!: strings.MaxRunes(63) & strings.MinRunes(3) & {
			=~"^[a-z0-9][a-z0-9.-]{1,61}[a-z0-9]$"
		}

		// NodesIAMInstanceProfiles is a list of IAM instance profiles,
		// which will be allowed to read
		// worker nodes bootstrap data from S3 Bucket.
		nodesIAMInstanceProfiles!: [...string]
	}

	// SSHKeyName is the name of the ssh key to attach to the bastion
	// host. Valid values are empty string (do not use SSH keys), a
	// valid SSH key name, or omitted (use the default SSH key name)
	sshKeyName?: string
}
